using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using ExcelDataReader;
using Microsoft.Win32;

namespace Журнал
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        IExcelDataReader edr;
        public MainWindow()
        {
            InitializeComponent();
            List<Jurnal> jurnals = new List<Jurnal>();
            //{

            //}
            Baza.ItemsSource = jurnals;
            Baza.AutoGenerateColumns = true;

            Baza.AutoGeneratedColumns += (o, e) =>
            {

                Baza.Columns[0].Header = "№";
                Baza.Columns[1].Header = "Фамилия И.О.";
                Baza.Columns[2].Header = "ПР 1";
                Baza.Columns[3].Header = "ПР 2";
                Baza.Columns[4].Header = "ПР 3";
                Baza.Columns[5].Header = "ПР 4";
                Baza.Columns[6].Header = "ПР 5";
                Baza.Columns[7].Header = "ПР 6";
                Baza.Columns[8].Header = "ПР 7";
                Baza.Columns[9].Header = "ПР 8";
                Baza.Columns[10].Header = "ПР 9";
                Baza.Columns[11].Header = "ПР 10";
            };
        }

        private void Zagruz_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "EXCEL files (*.xlsx)|.xslx|EXCEL Files (*.xls)| *.xls|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() != true)
            {
                return;
            }
            Baza.ItemsSource = readFile(openFileDialog.FileName);
        }

        private DataView readFile(string fileNames)
        {
            var extencion = fileNames.Substring(fileNames.LastIndexOf('.'));
            FileStream stream = File.Open(fileNames, FileMode.Open, FileAccess.Read);
            if (extencion == ".xlsx")
            {
                edr = ExcelReaderFactory.CreateOpenXmlReader(stream);
            }
            if (extencion == ".xls")
            {
                edr = ExcelReaderFactory.CreateOpenXmlReader(stream);
            }
            var conf = new ExcelDataSetConfiguration
            {
                ConfigureDataTable = _ => new ExcelDataTableConfiguration
                {
                    UseHeaderRow = true
                }
            };
            DataSet dataSet = edr.AsDataSet(conf);
            DataView dataView = dataSet.Tables[0].AsDataView();
            edr.Close();
            return dataView;
        }
        
        public static void saveFile(DataTable dataTable, bool overwriteFile  = true)
        {
            //var ext = fileNames.Substring(fileNames.LastIndexOf('.'));
            //FileStream stream = File.Sa(fileNames, FileMode.Open, FileAccess.Read);
            //if (extencion == ".xlsx")
            //{
            //    edr = ExcelReaderFactory.CreateOpenXmlReader(stream);
            //}
            //if (extencion == ".xls")
            //{
            //    edr = ExcelReaderFactory.CreateOpenXmlReader(stream);
            //}
            //var conf = new ExcelDataSetConfiguration
            //{
            //    ConfigureDataTable = _ => new ExcelDataTableConfiguration
            //    {
            //        UseHeaderRow = true
            //    }
            //};
            //DataSet dataSet = edr.AsDataSet(conf);
            //DataView dataView = dataSet.Tables[0].AsDataView();
            //edr.Close();
            //return dataView;
            var dialog = new SaveFileDialog();
            dialog.Filter = "EXCEL files (*.xlsx)|.xlsx|EXCEL Files (*.xls)| *.xls|All files (*.*)|*.*";

            var result = dialog.ShowDialog();

            if (result is null) return;
            if (result == false) return;

            if(File.Exists(dialog.FileName) && overwriteFile)
                File.Delete(dialog.FileName);
            using (OleDbConnection connection = new OleDbConnection())
            {
                connection.ConnectionString = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={dialog.FileName};" +
                                          "Extended Properties='Excel 12.0 Xml;HDR=YES;'";
                connection.Open();
                using (var command = new OleDbCommand())
                {
                    command.Connection = connection;
                    var columnNames = (from DataColumn dataColumn in dataTable.Columns select dataColumn.ColumnName).ToList();

                    var tableName = !string.IsNullOrWhiteSpace(dataTable.TableName) ? dataTable.TableName : Guid.NewGuid().ToString();
                    command.CommandText = $"CREATE TABLE [{tableName}]  ({string.Join(",", columnNames.Select(c => $"[{c}] VARCHAR").ToArray())});";
                    command.ExecuteNonQuery();
                    foreach (DataRow row in dataTable.Rows)
                    {
                        var rowValues = (from DataColumn column in dataTable.Columns select (row[column] != null && row[column] != DBNull.Value) ? row[column].ToString() : string.Empty).ToList();
                        command.CommandText = $"INSERT INTO [{tableName}]({string.Join(",", columnNames.Select(c => $"[{c}]"))}) VALUES ({string.Join(",", rowValues.Select(r => $"'{r}'").ToArray())});";
                        command.ExecuteNonQuery();
                    }
                }
                connection.Close();
            }

        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Baza.SelectAllCells();
            Baza.ClipboardCopyMode = DataGridClipboardCopyMode.ExcludeHeader;
            ApplicationCommands.Copy.Execute(null, Baza);
            Baza.UnselectAllCells();
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "EXCEL files (*.xlsx)|.xsls|EXCEL Files (*.xls)| *.xls|All files (*.*)|*.*";
            if (saveFileDialog1.ShowDialog() != true)
            {
                return;
            }
            Baza.ItemsSource = readFile(saveFileDialog1.FileName);

        }

        private void Button1_Click(object sender, RoutedEventArgs e)
        {
            if (Baza.ItemsSource is List<Jurnal>)
                saveFile(ToDataTable(Baza.ItemsSource as List<Jurnal>));
            else if (Baza.ItemsSource is DataView)
                saveFile((Baza.ItemsSource as DataView).Table);
        }

        public static DataTable ToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);

            //Get all the properties
            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {
                    //inserting property values to datatable rows
                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }
            //put a breakpoint here and check datatable
            return dataTable;
        }

    }
    public class Jurnal
    {

        public int num { get; set; }
        public string FIO { get; set; }
        public int PR1 { get; set; }
        public int PR2 { get; set; }
        public int PR3 { get; set; }
        public int PR4 { get; set; }
        public int PR5 { get; set; }
        public int PR6 { get; set; }
        public int PR7 { get; set; }
        public int PR8 { get; set; }
        public int PR9 { get; set; }
        public int PR10 { get; set; }

    }

}
